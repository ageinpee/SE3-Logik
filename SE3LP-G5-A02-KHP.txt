Blatt 2
----------------------------------------------------------
Aufg. 1
-------------

        ?- mutter_von(P1, X), vater_von(X, P2).
        P1 = julia,
        X = otto,
        P2 = hans ;
        P1 = julia,
        X = otto,
        P2 = helga ;
        false.

-->	Hans und Helga sind die Enkel von Julia, und zwar so dass Otto der Sohn von Julia ist und der Vater von hans und helga
	Sinnvolle Bezeichner für P1: Großmutter
				  X: Vater
				 P2: Enkel

        ?- mutter_von(X, P1), mutter_von(X, P2), P1\=P2.
        X = marie,
        P1 = hans,
        P2 = helga ;
        X = marie,
        P1 = helga,
        P2 = hans ;
        X = barbara,
        P1 = klaus,
        P2 = andrea ;
        X = barbara,
        P1 = andrea,
        P2 = klaus ;
        X = charlotte,
        P1 = barbara,
        P2 = magdalena ;
        X = charlotte,
        P1 = magdalena,
        P2 = barbara ;
        false.

-->	P1 und P2 sind verschiedene Geschwister mit der selber Mutter X.
	Sinnvolle Bezeichner für P1: Geschwister1
				 P2: Geschwister2
				  X: Mutter

        ?- vater_von(X,P1), mutter_von(Y,X), mutter_von(Y,Z), mutter_von(Z,P2), X\=Z.
        false.

-->	Die Anfrage fragt ab, ob der Vater von P1 eine weitere Schwester mütterlicherseits hat, die ein Kind hat.
	Oder anders: Hat P1 eine Cousine/einen Cousin, die/der aus dessen Mutter direkt mit dem Vater von P1 verwandt ist.
	Sinnvolle Bezeichner für P1: Cousin_e1
				 P2: Cousin_e2
				  X: Vater_von_1
				  Y: Großmutter
				  Z: Mutter_von_2

        ?- mutter_von(X,P1), mutter_von(Y,P2), vater_von(Z,P1), vater_von(Z,P2), P1\=P2, X\=Y.
        false.

-->	Die Anfrage fragt, ob die Datenbank zwei Halb-Geschwister mit gemeinsamem Vater und unterschiedlichen Müttern enthält.
	Sinnvolle Bezeichner für P1: Halb_Geschwister1
				 P2: Halb_Geschwister2
				  X: Mutter1
				  Y: Mutter2
				  Z: Vater



Aufg 2
---------------
  1.)	?- produkt(PId, Kat, Tit, Aut, Ver, Ers, Lag), Lag=0.

	PId = 12348,
	Kat = buch,
	Tit = blutrache,
	Aut = wolf_michael,
	Ver = meister,
	Ers = 2007,
	Lag = 0 ;
	false.

  2.)   ?- produkt(PId, Kat, Tit, Aut, Vers, Ers, Lag), Kat=dvd, Lag>100.
	false.

  Die Anfrage trifft auf die Datenbank überhaupt nicht zu.
  Zutreffend wäre diese Anfrage (gegenüber Aufgabe 2.1):
  Von welchen Büchern sind noch mehr als 100 Stück im Lager?

        ?- produkt(PId, Kat, Tit, Aut, Vers, Ers, Lag), Kat=buch, Lag>100.

        PId = 12346,
        Kat = buch,
        Tit = hoffnung,
        Aut = sand_molly,
        Vers = kasper,
        Ers = 2015,
        Lag = 319 ;

        PId = 12347,
        Kat = buch,
        Tit = winterzeit,
        Aut = wolf_michael,
        Vers = meister,
        Ers = 2011,
        Lag = 204 ;
        false.

  3.)	  ?- (verkauft(PId, Jah1, Pre1, _), Jah1=2012),
	       (verkauft(PId, Jah2, Pre2, _), Jah2=2011),
         (PId=12345; PId=12346; PId=12347; PId=12348; PId=12349),
         Pre1<Pre2.
	false.

  4.)   ?- (verkauft(PId, Jah1, _, Ver1), Jah1=2013),
	   		   (verkauft(PId, Jah2, _, Ver2), Jah2=2012),
           (PId=12345; PId=12346; PId=12347; PId=12348; PId=12349),
           Ver1>Ver2.

        PId = 12345,
        Jah1 = 2013,
        Ver1 = 350,
        Jah2 = 2012,
        Ver2 = 270 ;

        false.

  5.)	?- produkt(_, Kat, Tit, _, Ver1, Ers1, _),
				 produkt(_, Kat, Tit, _, Ver2, Ers2, _),
				 Kat=buch, Ver1\=Ver2, Ers1<Ers2.
			false.

  6.)   ?- produkt(_, Kat1, Tit, _, _, _, _),
        |    Kat1 = buch,
        |    not((
        |    produkt(_, Kat2, Tit, _, _, _, _),
        |    Kat2 = hoerbuch
        |    )).

        Kat1 = buch,
        Tit = sonnenuntergang ;

        Kat1 = buch,
        Tit = blutrache ;
        false.

  7.) ?- produkt(PId, _, Tit, _, _, _, Lag1), \+((produkt(_, _, _, _, _, _, Lag2), Lag2 > Lag1)).

			PId = 12346,
			Tit = hoffnung,
			Lag1 = 319 ;
			false.

Notiz: Der Trace ist nicht mit angegeben, da dieser bei einigen der Querys viel zu lang ist.




Aufg. 3
-------------
  1.)
        % Definition

        ?- assert(
        |    preiserhoehung(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,Lagerbestand,JahrVor,PreisVor,JahrNach,PreisNach) :-
        |    (
        |    produkt(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,Lagerbestand),
        |    verkauft(PId,JahrVor,PreisVor,_),
        |    verkauft(PId,JahrNach,PreisNach,_),
        |    JahrVor is JahrNach - 1,
        |    PreisVor < PreisNach)
        |    ).
        true.

        % Testfall

        ?- preiserhoehung(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,Lagerbestand,Vorjahr,PreisVorjahr,Umsatzjahr,PreisUmsatzjahr).

        PId = 12348,
        Kategorie = buch,
        Titel = blutrache,
        Autor = wolf_michael,
        Verlag = meister,
        Erscheinungsjahr = Vorjahr, Vorjahr = 2007,
        Lagerbestand = 0,
        PreisVorjahr = 29,
        Umsatzjahr = 2008,
        PreisUmsatzjahr = 34 ;

        PId = 12348,
        Kategorie = buch,
        Titel = blutrache,
        Autor = wolf_michael,
        Verlag = meister,
        Erscheinungsjahr = 2007,
        Lagerbestand = 0,
        Vorjahr = 2008,
        PreisVorjahr = 34,
        Umsatzjahr = 2009,
        PreisUmsatzjahr = 39 ;
        false.

  2.)
        % Definition

        ?- assert(
        |    angebotzumerstenmal(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,_) :-
        |    (
        |    produkt(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,_),
        |    not((
        |    produkt(_,_,Titel,Autor,_,ErscheinungsjahrNach,_),
        |    Erscheinungsjahr > ErscheinungsjahrNach
        |    ))
        |    )
        |    ).
        true.

        % Testfall
        % Ein Tupel fürs Buch "Winterzeit" wird in die Datenbank hinzugefügt,
        % sodass von dem Buch vier Auflagen in der Datenbank vorkommen.

        ?- asserta(produkt(12344,buch,winterzeit,wolf_michael,meister,2016,21)).
        true.

        ?- produkt(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,_),
        |    Titel == winterzeit.

        PId = 12344,
        Kategorie = buch,
        Titel = winterzeit,
        Autor = wolf_michael,
        Verlag = meister,
        Erscheinungsjahr = 2016 ;

        PId = 12347,
        Kategorie = buch,
        Titel = winterzeit,
        Autor = wolf_michael,
        Verlag = meister,
        Erscheinungsjahr = 2011 ;

        PId = 12349,
        Kategorie = buch,
        Titel = winterzeit,
        Autor = wolf_michael,
        Verlag = meister,
        Erscheinungsjahr = 2015 ;

        PId = 34568,
        Kategorie = hoerbuch,
        Titel = winterzeit,
        Autor = wolf_michael,
        Verlag = audio,
        Erscheinungsjahr = 2017.

        ?- angebotzumerstenmal(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,_),
        |    Titel == winterzeit.

        PId = 12347,
        Kategorie = buch,
        Autor = wolf_michael,
        Verlag = meister,
        Erscheinungsjahr = 2011 ;
        false.

  3.)
        % Die Aufgabestellung ist mir nicht klar.
        % Ich gehe davon aus, dass man ein "aktuelles" Jahr als Argument eingeben muss.
        % Nur Produkte, die im "letzten" Jahr, also im Vorjahr des "aktuellen" Jahres erschienen sind, werden ermittelt.

        % Definition

        ?- assert(
        |    ladenhueter(DiesesJahr,PId,Kategorie,Titel,Autor,Verlag,Lagerbestand,Erscheinungsjahr,VerkaufteExemplare,Preis) :-
        |    (
        |    produkt(PId,Kategorie,Titel,Autor,Verlag,Erscheinungsjahr,Lagerbestand),
        |    verkauft(PId,Erscheinungsjahr,Preis,VerkaufteExemplare),
        |    Erscheinungsjahr is DiesesJahr - 1,
        |    Lagerbestand >= VerkaufteExemplare * 2
        |    )
        |    ).
        true.

        % Testfälle

        ?- ladenhueter(2018,PId,Kategorie,Titel,Autor,Verlag,Lagerbestand,Erscheinungsjahr,VerkaufteExemplare,Preis).
        false.

        ?- ladenhueter(2017,PId,Kategorie,Titel,Autor,Verlag,Lagerbestand,Erscheinungsjahr,VerkaufteExemplare,Preis).
        false.

        ?- ladenhueter(2016,PId,Kategorie,Titel,Autor,Verlag,Lagerbestand,Erscheinungsjahr,VerkaufteExemplare,Preis).
        PId = 12346,
        Kategorie = buch,
        Titel = hoffnung,
        Autor = sand_molly,
        Verlag = kasper,
        Lagerbestand = 319,
        Erscheinungsjahr = 2015,
        VerkaufteExemplare = 45,
        Preis = 19 ;
        false.

        ?- ladenhueter(2015,PId,Kategorie,Titel,Autor,Verlag,Lagerbestand,Erscheinungsjahr,VerkaufteExemplare,Preis).
        PId = 23456,
        Kategorie = ebuch,
        Titel = sonnenuntergang,
        Autor = hoffmann_susanne,
        Verlag = meister,
        Lagerbestand = 1,
        Erscheinungsjahr = 2014,
        VerkaufteExemplare = 0,
        Preis = 13 ;
        false.

        ?- ladenhueter(2014,PId,Kategorie,Titel,Autor,Verlag,Lagerbestand,Erscheinungsjahr,VerkaufteExemplare,Preis).
        false.



Aufg. 4
-------------
  1)
        Gemeinsamkeiten:

            In der Prolog-Syntax werden Fakt, Regel und Anfrage alle als Klausel angesehen. Zudem haben Sie den gleichen Baustein, nämlich Struktur, die folgendermaßen definiert ist:
                Struktur ::= Name['('Term{','Term}')']
                    Term ::= Konstante | Variable | Struktur | Liste

        Unterschiede:

            Ein Fakt enthält genau eine Struktur, in der alle Terme Konstanten sind, z.B.
                obj(1,efh,gaertnerstr,15,1965).

            Eine Anfrage ist ein Ziel, das folgendermaßen definiert ist:
                            Ziel ::= elementares_Ziel | komplexes_Ziel
                elementares_Ziel ::= Struktur
                  komplexes_Ziel ::= elementares_Ziel (',' | ';') Ziel
            Die Argumente in einer Anfrage können Konstanten oder Variablen sein, z.B.
                obj(1,efh,gaertnerstr,15,Jahr).

            Eine Regel besteht aus einem Kopf und einem Körper:
                 Regel ::= Kopf ':-' Körper
                  Kopf ::= Struktur
                Körper ::= Ziel
            Regeln werden zweck deduktiver Datenbanken verwendet, z.B.
                liebt(paul,X) :- liebt(X,buch).

            Nicht nur in der Syntax, sondern auch in der Semantik unterscheiden sich die drei Begriffe. Ein Fakt spezifiziert ein Element einer Relation. Die Anfrage erfordert die Antwort auf die Frage, ob das Ziel (eine logische Aussage) aus der Datenbasis folgt. Den Regeln liegt die logische Ableitbarkeit mit modus ponens zugrunde.

  2)
        Eine Anfrage löst einen Suchprozess, also ein systematisches Durchmustern von Entscheidungsalternativen als Antwort(en) auf die Anfrage. Die Alternativen folgen aus den gegebenen Fakten und Regeln.

        In der Logikprogrammierung erhält eine Variable ihren Wert durch Unifikation. Diese Bindung kann nur durch Backtracking wieder aufgelöst werden. Ein Wertmanipulation wie in der imperativen Programmierung ist völlig ausgeschlossen. Beim letzteren entspricht eine Variable ziemlich genau einem (konkreten) Speicherplatz im Hardwarespeicher, dessen Inhalt beliebig verändert werden kann.

        Instanziierung ist Variablenbindung, wobei einer Variable ein Wert eindeutig zugeordnet wird.
